# Improvind Bash ###############################################################
alias grep="grep --colour='auto'"
alias ls='gls -v --color=auto'
alias ll="ls -l"
alias l="ls -CF"
alias ip='ipython --no-banner'
alias pip-update="pip install --upgrade pip && pip freeze --local | grep -v \
'^\-e' | cut -d = -f 1  | xargs -n1 pip install -U"
alias latex-update="tlmgr update --self --all --reinstall-forcibly-removed"
alias py="python"
alias jn='jupyter notebook'
alias jl='jupyter lab'
alias pl="ip --pylab"
alias eject="diskutil eject"
alias skim="open -a /Applications/Skim.app"
alias preview="open -a /Applications/Preview.app"
alias PPUU="conda activate PPUU"
alias   ..='cd ../'
alias  ...='cd ../../'
alias ....='cd ../../../'
alias   .3='cd ../../../'
alias   .4='cd ../../../../'
alias   .5='cd ../../../../../'
alias screen-off="pmset displaysleepnow"

alias sudo='sudo -E'  # Use current user configs
alias grep='grep  --color=auto --exclude-dir={.git}'
alias c='clear'

alias up='docker-compose up'
alias down='docker-compose down'
alias build='docker-compose build'
alias dps='docker ps'

# Add `--directory XYZ` if needed
alias server='python -m http.server 3030'



alias 'ttop=top -ocpu -R -F -s 2 -n30'
alias 'thtop= htop -s PERCENT_CPU'

# # linked data {{{
# Some handy shortcuts
alias curtle='curl -H "Accept: text/turtle"'
alias curltrig='curl -H "Accept: application/trig"'
alias curltriples='curl -H "Accept: application/n-triples"'
alias curlquads='curl -H "Accept: application/n-quads"'
alias curlson='curl -H "Accept: application/json"'
alias curld='curl -H "Accept: application/ld+json"'

# N-Triples aliases from http://blog.datagraph.org/2010/03/grepping-ntriples
alias rdf-count="awk '/^\s*[^#]/ { n += 1 } END { print n }'"
alias rdf-lengths="awk '/^\s*[^#]/ { print length }'"
alias rdf-length-avg="awk '/^\s*[^#]/ { n += 1; s += length } END { print s/n }'"
alias rdf-length-max="awk 'BEGIN { n=0 } /^\s*[^#]/ { if (length>n) n=length } END { print n }'"
alias rdf-length-min="awk 'BEGIN { n=1e9 } /^\s*[^#]/ { if (length>0 && length<n) n=length } END { print (n<1e9 ? n : 0) }'"
alias rdf-subjects="awk '/^\s*[^#]/ { print \$1 }' | uniq"
alias rdf-predicates="awk '/^\s*[^#]/ { print \$2 }' | uniq"
alias rdf-objects="awk '/^\s*[^#]/ { ORS=\"\"; for (i=3;i<=NF-1;i++) print \$i \" \"; print \"\n\" }' | uniq"
alias rdf-datatypes="awk -F'\x5E' '/\"\^\^</ { print substr(\$3, 2, length(\$3)-4) }' | uniq"

# alias -s rdf="rapper --count"
# alias -s owl="rapper --count"
# alias -s ttl="rapper -i turtle --count"
# alias -s tt="rapper -i turtle --count"
# alias -s n3="rapper -i turtle --count"
# alias -s nq="rapper -i nquads --count"
# alias -s nt="rapper -i ntriples --count"
# alias -s ntriples="rapper -i ntriples --count"
# alias -s ntriple="rapper -i ntriples --count"
# alias -s trig="rapper -i trig --count"
#}}}


# Create ssh tunnel via cims for Jupyter Notebook
# Run as: nb server_name
function nb {
    if [ -z "$1" ]; then
        echo -e '  > run as: \033[1;32m$\033[0m nb <my_server>'
        return
    fi
    echo "Connecting http://localhost:8000 -> $1:8888"
    read < <( ssh -NCqL 8000:localhost:8888 $1 & echo $! )
    echo "Done. PID = $REPLY"
}


# open jupyter on CAML cluster
alias camlnd='open https://camlnd.crc.nd.edu:9800/'

# scratch quota
alias squota='pan_df -h /scratch365/$USER'


# Exports to set up bash environment

#Scree colours
export CLICOLOR=1
export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD

# Better ls colouring
if [[ -f /usr/local/bin/gdircolors && -f $HOME/.dir_colors ]]; then
    eval $(gdircolors -b $HOME/.dir_colors)
fi

# Coloured LESS (MAN) pages
export LESS_TERMCAP_mb=$(printf '\e[01;31m') # enter blinking mode – red
export LESS_TERMCAP_md=$(printf '\e[01;35m') # enter double-bright mode – bold, magenta
export LESS_TERMCAP_me=$(printf '\e[0m') # turn off all appearance modes (mb, md, so, us)
export LESS_TERMCAP_se=$(printf '\e[0m') # leave standout mode
export LESS_TERMCAP_so=$(printf '\e[01;33m') # enter standout mode – yellow
export LESS_TERMCAP_ue=$(printf '\e[0m') # leave underline mode
export LESS_TERMCAP_us=$(printf '\e[04;36m') # enter underline mode – cyan

# Use Vim key binding in Bash and editor
set -o vi
export EDITOR="vim"

export IGNOREEOF=2
export PAGER=less
export LESS=-XRi
export LANG='en_US.UTF-8'




# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
export HISTCONTROL=ignoreboth

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
export HISTSIZE=1000
export HISTFILESIZE=2000
export HISTTIMEFORMAT="%d/%m/%y %T "
# Essential bash completion
if [ -f $(brew --prefix)/etc/bash_completion ]
then
    source $(brew --prefix)/etc/bash_completion
fi

# Fix Catalina zsh shit warning
export BASH_SILENCE_DEPRECATION_WARNING=1

# Git settings #################################################################
name=$(networksetup -getcomputername)

function parse_git_dirty {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}
function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/[\1$(parse_git_dirty)]/"
}
export PS1="\[\e[1;35m\]\u\[\e[38;5;255m\]@\[\e[1;34m\]$name \
\[\e[1;33m\]\w\[\e[0m\] \$(parse_git_branch)\n\[\e[1;32m\]$\[\e[0m\] "
export PS2="\[\e[1;31m\]>\[\e[0m\] "

# Shortcuts for CRC machines ##################################################
#Some useful EXPORTs
export CRC="crc.nd.edu"
export FE1="crcfe01.$CRC"
export FE2="crcfe02.$CRC"
export CAML="caml.$CRC"

# and corresponding ALIASes
alias FE1="ssh $FE1"
alias CAML="ssh $CAML"

# with X forwarding
alias FE1X="ssh -Y $FE1"

# Find and open papers #########################################################
# Adapted from https://superuser.com/a/1293358/224792
# Find any item matching search query in file name
function spot {
  mdfind "kMDItemDisplayName=='*$1*'cd";
}

# Restrict to files under (recursive) a specific path
function findpaper {
    mdfind \
        -onlyin "$HOME/NYU/Articles" \
        -onlyin "$HOME/NYU/Old articles" \
        "kMDItemDisplayName=='*$1*'cd";
}

# Default to open the first entry unless 2nd positional argument is given
function openpaper {
    FILEID=$(printf "%sp" ${2:-1})
    open "$(findpaper $1 | sed -n "${FILEID}")"
}

# CUDA #########################################################################
export PATH=$PATH':/usr/local/cuda/bin'
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH':/usr/local/cuda/lib'

